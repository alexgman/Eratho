// <copyright file="PreCompanyUpdate.cs" company="Microsoft">
// Copyright (c) 2012 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>10/8/2012 9:44:32 AM</date>
// <summary>Implements the PreCompanyUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace VerathonSolution.Plugins
{
    using System;
    using System.ServiceModel;
    using System.Xml;
    using System.Linq;
    using System.Windows.Forms;
    using System.Collections.Generic;

    using Microsoft.Xrm.Sdk;
   
    using Verathon.Crm.Entities;

    //using Microsoft.Crm.Sdk;
    //using Microsoft.Crm.SdkTypeProxy;
    //using Xrm;


    /// <summary>
    /// PreCompanyUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PreCompanyUpdate: Plugin
    {
        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes before the core platform operation executes.
        /// The image contains the following attributes:
        /// No Attributes
        /// </summary>
        private readonly string preImageAlias = "preImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PreCompanyUpdate"/> class.
        /// </summary>
        public PreCompanyUpdate()
            : base(typeof(PreCompanyUpdate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Update", "account", new Action<LocalPluginContext>(ExecutePreCompanyUpdate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreCompanyUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }
            try
            {
                /*This requirement has been scraped out.
                 * 
                //Ensure that Market Sector is present when company is udpated.
                IPluginExecutionContext context = localContext.PluginExecutionContext;

                Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains(this.preImageAlias)) ? context.PreEntityImages[this.preImageAlias] : null;
                Entity target = (Entity)localContext.PluginExecutionContext.InputParameters["Target"];

                XrmServiceContext crm = new XrmServiceContext(localContext.OrganizationService);

                Guid guidAccountId = (Guid)target["accountid"];

                IEnumerable<Entity> members = from c in crm.AccountSet
                                              join mktSector in crm.vth_account_vth_marketsectorSet on c.AccountId equals mktSector.accountid
                                              where c.AccountId == guidAccountId
                                              select mktSector;

                var count = members.Count();

                if (count <= 0)
                {
                    throw new InvalidPluginExecutionException("Market Sector cannot be empty. Please add items before saving the record.");
                }
                */
            }
            catch (InvalidPluginExecutionException invalid)
            {
                //We dont to catch exception for InvalidPluginExecution, so just throw them on
                throw;
            }

            catch (Exception ex)
            {
                GBSPluginExceptionLog.LogException(localContext.OrganizationService, localContext.PluginExecutionContext, localContext.TracingService, GetType().Module.ScopeName, ex);
            }
        }
    }
}
