// <copyright file="PreServiceRequestCreate.cs" company="Microsoft">
// Copyright (c) 2012 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>9/26/2012 12:54:21 PM</date>
// <summary>Implements the PreServiceRequestCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace VerathonSolution.Plugins
{
    using System;
    using System.ServiceModel;
    using System.Xml;

    using Microsoft.Xrm.Sdk;

    using Verathon.Crm.Entities;


    /// <summary>
    /// PreServiceRequestCreate Plugin.
    /// </summary>    
    public class PreServiceRequestCreate: Plugin
    {
        public string unsecureConfig = "";

        /// <summary>
        /// Initializes a new instance of the <see cref="PreServiceRequestCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecure) configuration information.</param>
        /// <param name="secure">Contains non-public (secure) configuration information. 
        /// When using Microsoft Dynamics CRM for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreServiceRequestCreate(string unsecure, string secure)
            : base(typeof(PreServiceRequestCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Create", "incident", new Action<LocalPluginContext>(ExecutePreServiceRequestCreate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.


           // TODO: Implement your custom configuration handling.

            //XML will be parsed in the execute if needed.
            unsecureConfig = unsecure;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreServiceRequestCreate"/> class.
        /// </summary>
        public PreServiceRequestCreate()
            : base(typeof(PreServiceRequestCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Create", "incident", new Action<LocalPluginContext>(ExecutePreServiceRequestCreate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreServiceRequestCreate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            try
            {
                //if the company accountnumber is already set, skip (import)
                Entity target = (Entity)localContext.PluginExecutionContext.InputParameters["Target"];
                //if (!target.Contains("ticketnumber"))
                //{

                    //first load up the config to get the nextId sequence
                    XmlDocument unsecureXml = new XmlDocument();
                    unsecureXml.LoadXml(unsecureConfig);
                    Guid sequenceId = new Guid(unsecureXml.SelectSingleNode("//gbs_nextidId").InnerText);

                    //getting the next id should be the first DB-based operation to avoid deadlock
                    target["ticketnumber"] = GBSNextId.GetNextIntegerId(sequenceId, localContext.OrganizationService).ToString();
                //}


            }
            catch (Exception ex)
            {
                //create the Plug-in Exception Log
                GBSPluginExceptionLog.LogException(localContext.OrganizationService, localContext.PluginExecutionContext, localContext.TracingService, GetType().Module.ScopeName, ex);
            }
        }
    }
}
