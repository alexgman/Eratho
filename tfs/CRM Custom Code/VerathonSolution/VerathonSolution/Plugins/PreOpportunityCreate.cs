// <copyright file="PreOpportunityCreate.cs" company="Microsoft">
// Copyright (c) 2012 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>9/25/2012 9:39:52 PM</date>
// <summary>Implements the PreOpportunityCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace VerathonSolution.Plugins
{
    using System;
    using System.ServiceModel;
    using System.Xml;
    using System.Linq;
    using System.Collections.Generic;

    using Microsoft.Xrm.Sdk;

    using Verathon.Crm.Entities;
    using Verathon.Crm.Helper;

    /// <summary>
    /// PreOpportunityCreate Plugin.
    /// </summary>    
    public class PreOpportunityCreate: Plugin
    {
        public string unsecureConfig = "";

        /// <summary>
        /// Initializes a new instance of the <see cref="PreOpportunityCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecure) configuration information.</param>
        /// <param name="secure">Contains non-public (secure) configuration information. 
        /// When using Microsoft Dynamics CRM for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOpportunityCreate(string unsecure, string secure)
            : base(typeof(PreOpportunityCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Create", "opportunity", new Action<LocalPluginContext>(ExecutePreOpportunityCreate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.


           // TODO: Implement your custom configuration handling.

            //XML will be parsed in the execute if needed.
            unsecureConfig = unsecure;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreOpportunityCreate"/> class.
        /// </summary>
        public PreOpportunityCreate()
            : base(typeof(PreOpportunityCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Create", "opportunity", new Action<LocalPluginContext>(ExecutePreOpportunityCreate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreOpportunityCreate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            try
            {
                //As of 10/29/12 this code handles three processes: 1.) Creates an original Opportunity ID, 2.) Sets the Close Probability field to a fixed number, and
                //3.) 
                IOrganizationService service = localContext.OrganizationService;
                Entity target = (Entity)localContext.PluginExecutionContext.InputParameters["Target"];
                if (!target.Contains("vth_opportunitynumber"))
                {

                    //first load up the config to get the nextId sequence
                    XmlDocument unsecureXml = new XmlDocument();
                    unsecureXml.LoadXml(unsecureConfig);
                    Guid sequenceId = new Guid(unsecureXml.SelectSingleNode("//gbs_nextidId").InnerText);

                    //getting the next id should be the first DB-based operation to avoid deadlock
                    target["vth_opportunitynumber"] = GBSNextId.GetNextIntegerId(sequenceId, localContext.OrganizationService).ToString();
                }
                if (target.Contains("vth_probability"))
                {
                    if (target["vth_probability"] != null)
                    {
                        string strProbability = Helper.GetPickListValueOption(service, "opportunity", "vth_probability", (OptionSetValue)target.Attributes["vth_probability"]);
                        switch (strProbability)
                        {
                            case "958560000":
                                target["closeprobability"] = 50;
                                break;
                            case "958560001":
                                target["closeprobability"] = 70;
                                break;
                            case "958560002":
                                target["closeprobability"] = 90;
                                break;
                            case "958560003":
                                target["closeprobability"] = 100;
                                break;
                            default:
                                target["closeprobability"] = 0;
                                break;
                        }
                    }
                    else
                    {
                        target["closeprobability"] = 0;
                    }
                }
                Guid guidAcctId = ((EntityReference)target["customerid"]).Id;
                string strProdBrand = Helper.GetPickListValueOption(service, "opportunity", "vth_productbrand", (OptionSetValue)target.Attributes["vth_productbrand"]);
                int intProdBrand = Convert.ToInt32(strProdBrand);
                OptionSetValue optProdBrand = new OptionSetValue(intProdBrand);
                XrmServiceContext crm = new XrmServiceContext(localContext.OrganizationService);

                IEnumerable<Territory> guidTerritory = from c in crm.TerritorySet
                                    join territory in crm.vth_account_territorySet on c.TerritoryId equals territory.territoryid
                                    where territory.accountid == guidAcctId
                                    where c.vth_ProductBrand.Value == optProdBrand.Value
                                    select c;
                                //where territory.FormattedValues["vth_ProductBrand"] == strProdBrand
                                //vth_Product == intProdBrand
                                //select new { c.accountid, territory.vth_Country };
                foreach (Territory ter in guidTerritory)
                {
                    Guid guidTerritoryId = ter.TerritoryId.Value;
                    EntityReference erTerritory = new EntityReference("territory", (Guid)guidTerritoryId);
                    target["vth_territoryid"] = erTerritory;
                    
                    if (ter.Contains("vth_systemuserid"))
                    {
                        Guid guidOwnerId = ((EntityReference)ter.Attributes["vth_systemuserid"]).Id;
                        EntityReference erOwner = new EntityReference("contact", (Guid)guidOwnerId);
                        target["ownerid"] = erOwner;
                    }
                }
            }
            catch (Exception ex)
            {
                //create the Plug-in Exception Log
                GBSPluginExceptionLog.LogException(localContext.OrganizationService, localContext.PluginExecutionContext, localContext.TracingService, GetType().Module.ScopeName, ex);
            }
        }
    }
}
