// <copyright file="PostAssociates.cs" company="Microsoft">
// Copyright (c) 2012 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>10/16/2012 4:03:20 PM</date>
// <summary>Implements the PostAssociates Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace VerathonSolution.Plugins
{
    using System;
    using System.ServiceModel;
    using System.Linq;
    using System.Collections.Generic;

    using Microsoft.Xrm.Sdk;

    using Verathon.Crm.Entities;

    /// <summary>
    /// PostAssociates Plugin.
    /// </summary>
    public class PostAssociates: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostAssociates"/> class.
        /// </summary>
        public PostAssociates()
            : base(typeof(PostAssociates))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Associate", "", new Action<LocalPluginContext>(ExecutePostAssociates)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostAssociates(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }
            //throw new InvalidPluginExecutionException("Testing associate trigger.");
            // TODO: Implement your custom Plug-in business logic.
            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;
            ITracingService tracingService = localContext.TracingService;

            try
            {

                // The InputParameters collection contains all the data passed in the message request.
                if (!context.InputParameters.Contains("Target")) { return; }

                EntityReference ef = (EntityReference)context.InputParameters["Target"];
                Relationship relationship = (Relationship)context.InputParameters["Relationship"];
                
                if (ef.LogicalName == "opportunity")
                {
                    //Ensure that the plugin code executes only when adding competitor to and opportunity
                    
                    if (relationship.SchemaName == "opportunitycompetitors_association")
                    {

                        // Get Related Entities 
                        EntityReferenceCollection re = (EntityReferenceCollection)context.InputParameters["RelatedEntities"];

                        Entity opp = new Entity("opportunity");
                        opp["opportunityid"] = ((EntityReference)ef).Id;
                        opp["vth_competitor"] = true;
                        service.Update(opp);
                    }
                }
                /*else if (ef.LogicalName == "account")
                {
                    if (relationship.SchemaName == "vth_account_territory")
                    {
                        Guid acctId = (Guid)ef.Id;

                        XrmServiceContext crm = new XrmServiceContext(localContext.OrganizationService);

                        IEnumerable<Entity> territory = from c in crm.vth_account_territorySet
                                                        where c.accountid == acctId
                                                        select Territory.EntityLogicalName;
                    }
                }*/
            }
            catch (FaultException ex)
            {
                GBSPluginExceptionLog.LogException(localContext.OrganizationService, localContext.PluginExecutionContext, localContext.TracingService, GetType().Module.ScopeName, ex);
            }
        }
    }
}
